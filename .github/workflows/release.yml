---
name: Release CI
on:
  - push
  - pull_request

jobs:
  build:
    runs-on: ${{ matrix.RUNNER_PLATFORM }}
    strategy:
      matrix:
        version:
          - linux-amd64
          - macos-amd64
          - windows-amd64
            # XXX probably, 32 bit Windows is not so common, but built it
            # anyway to see if the workflow has portability issues.
          - windows-i386
        include:
          # XXX all of variables defined here are required. use empty string,
          # "", or `${{ false }}` for BUILD_DEPEND if you do not need. GitHub
          # Action will refuse to run the workflow if any of them are not
          # defined.
          #
          # OS: used in many `if:` and in artifact names to identify artifact.
          # ARCH: used in artifact names to identify artifact.
          # RUNNER_PLATFORM: used in `runs-on:` to choose platform of the
          # runner.
          # ELECTRON_BUILDER_FLAGS: extra flags to pass when building code
          # with electron-builder.
          # BUILD_DEPEND: space-separated list of package names to install
          # before the build
          # PKG_INSTALL_CMD: command to install BUILD_DEPEND
          - version: linux-amd64
            OS: linux
            ARCH: amd64
            RUNNER_PLATFORM: ubuntu-latest
            ELECTRON_BUILDER_FLAGS: --linux AppImage snap deb rpm tar.gz --x64
            BUILD_DEPEND: graphicsmagick xz-utils
            PKG_INSTALL_CMD: sudo apt-get install
          - version: macos-amd64
            OS: macos
            ARCH: amd64
            RUNNER_PLATFORM: macos-latest
            ELECTRON_BUILDER_FLAGS: --macos
            BUILD_DEPEND: ${{ false }}
            PKG_INSTALL_CMD: brew install
          - version: windows-i386
            OS: windows
            ARCH: i386
            RUNNER_PLATFORM: windows-latest
            ELECTRON_BUILDER_FLAGS: --windows --ia32
            BUILD_DEPEND: ${{ false }}
            PKG_INSTALL_CMD: ""
          - version: windows-amd64
            OS: windows
            ARCH: amd64
            RUNNER_PLATFORM: windows-latest
            ELECTRON_BUILDER_FLAGS: --windows --x64
            BUILD_DEPEND: ${{ false }}
            PKG_INSTALL_CMD: ""
        node-version:
          # include 10.x only. serialport for 12.x is not available probably
          # because it does not support 12.x.
          #
          # "No prebuilt binaries found (target=12.18.1 runtime=node arch=x64 platform=linux)'
          - 10.x
    steps:
      - name: Install required packages
        if: matrix.BUILD_DEPEND
        run: ${{ matrix.PKG_INSTALL_CMD }} ${{ matrix.BUILD_DEPEND }}

      - name: Install snapcraft (Linux)
        # XXX electron-builder build fails when snapcraft is not installed
        # "snapcraft is not installed, please: sudo snap install snapcraft --classic'
        if: matrix.OS == 'linux'
        run: sudo snap install snapcraft --classic

      - name: Checkout LaserWeb4-Binaries
        uses: actions/checkout@v2
        with:
          # keep all history. `git describe` is used in the build to get
          # version string
          fetch-depth: 0

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Get npm cache directory
        id: npm-cache
        run: |
          echo "::set-output name=dir::$(npm config get cache)"

      - name: Cache npm
        uses: actions/cache@v2
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Get yarn cache directory
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache yarn
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Prepare
        run: |
          yarn install --frozen-lockfile
          yarn prep

      - name: Build LaserWeb4
        run: |
          yarn build-LaserWeb4

      - name: Build LaserWeb4-Binaries
        shell: bash
        run: |
          yarn bundle-LaserWeb4

          # remove `v` from semver because Windows does not like string in
          # version number.
          UI_VERSION=$(git describe --abbrev=0 --tags | tr -d 'v')

          # avoid path separator for portability
          cd node_modules
          cd lw.comm-server
          SERVER_VERSION=$(cat version.txt | cut -c 3-6)
          cd ..
          cd ..
          echo "UI_VERSION: ${UI_VERSION}"
          echo "SERVER_VERSION: ${SERVER_VERSION}"

          cd node_modules
          cd .bin
          ./electron-builder build --config.buildVersion=$UI_VERSION -p never ${{ matrix.ELECTRON_BUILDER_FLAGS }}

      - name: Upload build artifact (Unix)
        if: matrix.OS != 'windows'
        uses: actions/upload-artifact@v2
        with:
          name: LaserWeb-${{ matrix.OS }}-${{ matrix.ARCH }}-${{ github.sha }}
          path: |
            ${{ github.workspace }}/LaserWeb4-Binaries/dist/*.AppImage
            ${{ github.workspace }}/LaserWeb4-Binaries/dist/*.snap
            ${{ github.workspace }}/LaserWeb4-Binaries/dist/*.zip
            ${{ github.workspace }}/LaserWeb4-Binaries/dist/*.dmg
            ${{ github.workspace }}/LaserWeb4-Binaries/dist/*.exe
            ${{ github.workspace }}/LaserWeb4-Binaries/dist/*.rpm
            ${{ github.workspace }}/LaserWeb4-Binaries/dist/*.deb
            ${{ github.workspace }}/LaserWeb4-Binaries/dist/*.tar.gz

      - name: Upload build artifact (Windows)
        if: matrix.OS == 'windows'
        uses: actions/upload-artifact@v2
        with:
          name: LaserWeb-${{ matrix.OS }}-${{ matrix.ARCH }}-${{ github.sha }}
          path: |
            ${{ github.workspace }}\\LaserWeb4-Binaries\\dist\\*.AppImage
            ${{ github.workspace }}\\LaserWeb4-Binaries\\dist\\*.snap
            ${{ github.workspace }}\\LaserWeb4-Binaries\\dist\\*.zip
            ${{ github.workspace }}\\LaserWeb4-Binaries\\dist\\*.dmg
            ${{ github.workspace }}\\LaserWeb4-Binaries\\dist\\*.exe
            ${{ github.workspace }}\\LaserWeb4-Binaries\\dist\\*.rpm
            ${{ github.workspace }}\\LaserWeb4-Binaries\\dist\\*.deb
            ${{ github.workspace }}\\LaserWeb4-Binaries\\dist\\*.tar.gz
